name: build-and-upload-tauri

# ──────── TRIGGERS ──────────────────────────────────────────────────────────────
on:
  # automatic: fires once when you create a draft release
  release:
    types: [created]

  # manual: shows a “Run workflow” button in the Actions tab
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag to rebuild (leave blank for the latest release)'
        required: false
        type: string

# the workflow needs write access to upload assets
permissions:
  contents: write

# ──────── BUILD JOB ────────────────────────────────────────────────────────────
jobs:
  build-tauri:
    strategy:
      fail-fast: false
      matrix:
        include:
          # Apple Silicon
          - platform: macos-latest
            args: "--target aarch64-apple-darwin"
          # Intel Mac
          - platform: macos-latest
            args: "--target x86_64-apple-darwin"
          # Linux
          - platform: ubuntu-22.04
            args: ""
          # Windows
          - platform: windows-latest
            args: ""

    runs-on: ${{ matrix.platform }}

    steps:
      # — Check out sources -----------------------------------------------------
      - uses: actions/checkout@v4

      # — Resolve the release ID if this is a manual run ------------------------
      - name: Get release ID (manual trigger only)
        if: github.event_name == 'workflow_dispatch'
        id: rel
        uses: actions/github-script@v6
        with:
          script: |
            const core   = require('@actions/core')
            const tag    = core.getInput('tag') || null
            const owner  = context.repo.owner
            const repo   = context.repo.repo
            let release
            if (tag) {
              release = await github.rest.repos.getReleaseByTag({ owner, repo, tag })
            } else {
              release = await github.rest.repos.getLatestRelease({ owner, repo })
            }
            core.setOutput('id', release.data.id)

      # — Node / Rust toolchains ------------------------------------------------
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      # — Linux-only system deps -----------------------------------------------
      - name: Install Ubuntu dependencies
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.0-dev \
            libwebkit2gtk-4.1-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf

      # — Front‑end deps --------------------------------------------------------
      - name: Install front‑end dependencies
        run: npm install        # switch to pnpm/bun if you prefer

      # — Tauri build + upload --------------------------------------------------
      - name: Build & upload Tauri bundles
        uses: tauri-apps/tauri-action@v0.5.22
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # manual run → use the ID we just looked up
          # release event → ID is in the event payload
          releaseId: ${{ github.event_name == 'workflow_dispatch'
                         && steps.rel.outputs.id
                         || github.event.release.id }}
          args: ${{ matrix.args }}

  # ──────── (OPTIONAL) PUBLISH RELEASE JOB ─────────────────────────────────────
  # If you want the draft to be published automatically **only** for the normal
  # release trigger (not for manual rebuilds), keep this job as‑is.
  publish-release:
    if: github.event_name == 'release'        # skip on manual runs
    needs: build-tauri
    runs-on: ubuntu-latest
    steps:
      - name: Publish release
        uses: actions/github-script@v6
        env:
          RELEASE_ID: ${{ github.event.release.id }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              release_id: process.env.RELEASE_ID,
              draft:      false,
              prerelease: false
            })

#!/bin/bash
#
# Dieses Skript automatisiert die Ver√∂ffentlichung eines neuen AUR-Paket-Updates.
# Es f√ºhrt das Vorbereitungsskript aus, kopiert die Ergebnisse ins Nachbar-Repo,
# committet und pusht die √Ñnderungen automatisch.
#
# WICHTIG:
# - Muss aus dem Haupt-Projektverzeichnis (z.B. ImageMami) ausgef√ºhrt werden.
# - Das AUR-Repo muss sich im selben √ºbergeordneten Ordner befinden.

set -euo pipefail

# --- Konfiguration ---
# Name deines Pakets und des AUR-Repo-Ordners
PKG_NAME="imagemami"
# --- Ende Konfiguration ---

# Pfade definieren
AUR_REPO_PATH="../${PKG_NAME}"
PREPARE_SCRIPT="./prepare-aur.sh"
GENERATED_FILES_DIR="./${PKG_NAME}"

### 1. Voraussetzungen pr√ºfen
echo " √úberpr√ºfe Voraussetzungen..."
if [ ! -f "$PREPARE_SCRIPT" ]; then
    echo "‚ùå Fehler: Das Skript '$PREPARE_SCRIPT' wurde nicht gefunden."
    exit 1
fi
if [ ! -d "$AUR_REPO_PATH" ]; then
    echo "‚ùå Fehler: Das AUR-Repository '${AUR_REPO_PATH}' wurde nicht gefunden."
    exit 1
fi
echo "  ‚úÖ Voraussetzungen erf√ºllt."


### 2. (Schritt 3) AUR-Dateien vorbereiten
echo -e "\n F√ºhre das Vorbereitungsskript aus..."
bash "$PREPARE_SCRIPT"


### 3. Version f√ºr Commit-Nachricht auslesen
VERSION=$(grep '^pkgver=' "${GENERATED_FILES_DIR}/PKGBUILD" | cut -d'=' -f2)
if [ -z "$VERSION" ]; then
    echo "‚ùå Fehler: Konnte die Version nicht aus der PKGBUILD lesen."
    exit 1
fi
echo "  ‚úÖ Version ${VERSION} wird ver√∂ffentlicht."


### 4. (Schritt 4) Dateien ins AUR-Repo kopieren
echo -e "\n Kopiere PKGBUILD und .SRCINFO..."
cp "${GENERATED_FILES_DIR}/PKGBUILD" "${AUR_REPO_PATH}/"
cp "${GENERATED_FILES_DIR}/.SRCINFO" "${AUR_REPO_PATH}/"
echo "  ‚úÖ Dateien kopiert."


### 5. (Schritt 5) √Ñnderungen committen und pushen
echo -e "\n Ver√∂ffentliche √Ñnderungen im AUR-Repository..."
cd "$AUR_REPO_PATH"

# Pr√ºfen, ob es √ºberhaupt √Ñnderungen gibt, um leere Commits zu vermeiden
if git diff-index --quiet HEAD --; then
    echo "  ‚ÑπÔ∏è Keine √Ñnderungen festgestellt. Das Repository ist bereits aktuell."
    echo -e "\n‚úÖ Ver√∂ffentlichung abgeschlossen."
    exit 0
fi

git add PKGBUILD .SRCINFO

COMMIT_MSG="Update to version ${VERSION}"
git commit -m "$COMMIT_MSG"
echo "  ‚úÖ Commit erstellt: '$COMMIT_MSG'"

git push
echo "  ‚úÖ Erfolgreich zu AUR gepusht."

echo -e "\nüéâ Komplett fertig! Dein AUR-Paket ist aktuell."